from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from typing import Dict, Any, List, Optional


def build_admin_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    keyboard = [
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")],
        [KeyboardButton(text="–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")],
        [KeyboardButton(text="–ü—Ä–æ—à–µ–¥—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")],
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ—Ç–∞")],
        [KeyboardButton(text="–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def build_user_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    keyboard = [
        [KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")],
        [KeyboardButton(text="–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def build_event_inline_keyboard(draft: Dict[str, Any]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    keyboard = []
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—è
    def is_filled(value):
        return value is not None and str(value).strip() != ""
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–∞–ª–æ—á–∫–∞–º–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    title_mark = "‚úÖ" if is_filled(draft.get("title")) else ""
    desc_mark = "‚úÖ" if is_filled(draft.get("description")) else ""
    photo_mark = "‚úÖ" if is_filled(draft.get("photo")) else ""
    games_mark = "‚úÖ" if is_filled(draft.get("board_games")) else ""
    date_mark = "‚úÖ" if is_filled(draft.get("datetime")) else ""
    resp_mark = "‚úÖ" if is_filled(draft.get("responsible")) else ""
    qty_mark = "‚úÖ" if is_filled(draft.get("quantity")) else ""
    
    keyboard.extend([
        [InlineKeyboardButton(text=f"–ù–∞–∑–≤–∞–Ω–∏–µ {title_mark}", callback_data="evt:title")],
        [InlineKeyboardButton(text=f"–û–ø–∏—Å–∞–Ω–∏–µ {desc_mark}", callback_data="evt:description")],
        [InlineKeyboardButton(text=f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {photo_mark}", callback_data="evt:photo")],
        [InlineKeyboardButton(text=f"–ù–∞—Å—Ç–æ–ª–∫–∏ {games_mark}", callback_data="evt:board_games")],
        [InlineKeyboardButton(text=f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è {date_mark}", callback_data="evt:datetime")],
        [InlineKeyboardButton(text=f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ {resp_mark}", callback_data="evt:responsible")],
        [InlineKeyboardButton(text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {qty_mark}", callback_data="evt:quantity")],
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="evt:confirm")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_final_confirm_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="evt:final_confirm")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="evt:final_cancel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_events_list_keyboard(events: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    keyboard = []
    
    for i, event in enumerate(events):
        title = event.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ ID
        button_text = title[:30] + "..." if len(title) > 30 else title
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        is_completed = event.get("is_completed", False)
        if is_completed:
            button_text += " ‚úÖ"
        
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"event:show:{i}")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_event_edit_keyboard(event: Dict[str, Any]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    keyboard = []
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—è
    def is_filled(value):
        return value is not None and str(value).strip() != ""
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–∞–ª–æ—á–∫–∞–º–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    title_mark = "‚úÖ" if is_filled(event.get("title")) else ""
    desc_mark = "‚úÖ" if is_filled(event.get("description")) else ""
    photo_mark = "‚úÖ" if is_filled(event.get("photo")) else ""
    games_mark = "‚úÖ" if is_filled(event.get("board_games")) else ""
    date_mark = "‚úÖ" if is_filled(event.get("date")) else ""  # –ò—Å–ø–æ–ª—å–∑—É–µ–º "date" –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    resp_mark = "‚úÖ" if is_filled(event.get("responsible")) else ""
    qty_mark = "‚úÖ" if is_filled(event.get("quantity")) else ""
    
    keyboard.extend([
        [InlineKeyboardButton(text=f"–ù–∞–∑–≤–∞–Ω–∏–µ {title_mark}", callback_data="evt_edit:title")],
        [InlineKeyboardButton(text=f"–û–ø–∏—Å–∞–Ω–∏–µ {desc_mark}", callback_data="evt_edit:description")],
        [InlineKeyboardButton(text=f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {photo_mark}", callback_data="evt_edit:photo")],
        [InlineKeyboardButton(text=f"–ù–∞—Å—Ç–æ–ª–∫–∏ {games_mark}", callback_data="evt_edit:board_games")],
        [InlineKeyboardButton(text=f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è {date_mark}", callback_data="evt_edit:datetime")],
        [InlineKeyboardButton(text=f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ {resp_mark}", callback_data="evt_edit:responsible")],
        [InlineKeyboardButton(text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {qty_mark}", callback_data="evt_edit:quantity")],
        [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="evt_edit:confirm")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_edit_final_confirm_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="evt_edit:final_confirm")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="evt_edit:final_cancel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_event_management_keyboard(event_index: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    keyboard = [
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data=f"event:edit:{event_index}")],
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"event:participants:{event_index}")],
        [InlineKeyboardButton(text="–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data=f"event:blacklist:{event_index}")],
        [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=f"event:broadcast:{event_index}")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data=f"event:cancel:{event_index}")],
        [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data=f"event:complete:{event_index}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="event:back_to_list")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_participants_list_keyboard(participants: List[Dict[str, Any]], event_index: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    keyboard = []
    
    for i, participant in enumerate(participants):
        username = participant.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        status = participant.get("status", "registered")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        if status == "registered":
            button_text = f"‚úÖ {username}"
        elif status == "waitlist":
            button_text = f"‚è≥ {username} (–≤ –æ—á–µ—Ä–µ–¥–∏)"
        else:
            button_text = f"‚ùì {username}"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if len(button_text) > 30:
            button_text = button_text[:27] + "..."
        
        keyboard.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"participant:show:{event_index}:{i}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é", 
        callback_data=f"event:show:{event_index}"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_participant_info_keyboard(event_index: int, participant_index: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ"""
    keyboard = [
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"participant:message:{event_index}:{participant_index}")],
        [InlineKeyboardButton(text="üö´ –î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°", callback_data=f"participant:blacklist:{event_index}:{participant_index}")],
        [InlineKeyboardButton(text="‚ùå –ö–∏–∫–Ω—É—Ç—å", callback_data=f"participant:remove:{event_index}:{participant_index}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", callback_data=f"event:participants:{event_index}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_contact_responsible_keyboard(event_index: int, responsibles: List[str]) -> InlineKeyboardMarkup:
    keyboard: List[List[InlineKeyboardButton]] = []
    for tg in responsibles:
        username_clean = tg.lstrip("@")
        keyboard.append([InlineKeyboardButton(text=f"üîó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å {tg}", url=f"https://t.me/{username_clean}")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"event:show:{event_index}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_cancel_message_keyboard(event_index: int, participant_index: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"participant:cancel_message:{event_index}:{participant_index}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"participant:show:{event_index}:{participant_index}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_blacklist_confirm_keyboard(event_index: int, participant_index: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"participant:confirm_blacklist:{event_index}:{participant_index}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"participant:cancel_blacklist:{event_index}:{participant_index}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", callback_data=f"participant:show:{event_index}:{participant_index}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_blacklist_view_keyboard(blacklist: List[Dict[str, Any]], event_index: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    keyboard = []
    
    for i, blacklisted_user in enumerate(blacklist):
        username = blacklisted_user.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        added_by = blacklisted_user.get("added_by", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        reason = blacklisted_user.get("reason", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = f"üö´ {username}"
        if len(button_text) > 30:
            button_text = button_text[:27] + "..."
        
        keyboard.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"blacklist:show:{event_index}:{i}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é", 
        callback_data=f"event:show:{event_index}"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_blacklist_user_info_keyboard(event_index: int, blacklist_index: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
    keyboard = [
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"blacklist:message:{event_index}:{blacklist_index}")],
        [InlineKeyboardButton(text="‚úÖ –£–±—Ä–∞—Ç—å –∏–∑ –ß–°", callback_data=f"blacklist:remove:{event_index}:{blacklist_index}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ß–°", callback_data=f"event:blacklist:{event_index}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_past_event_actions_keyboard(event_index: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    keyboard = [
        [InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"event:participants:{event_index}")],
        [InlineKeyboardButton(text="üìä –°–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"event:collect_stats:{event_index}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="event:back_to_list")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_feedback_rating_keyboard(event_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ 1-10 –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    row1 = [
        InlineKeyboardButton(text=str(i), callback_data=f"feedback:rate:{event_id}:{i}") for i in range(1, 6)
    ]
    row2 = [
        InlineKeyboardButton(text=str(i), callback_data=f"feedback:rate:{event_id}:{i}") for i in range(6, 11)
    ]
    return InlineKeyboardMarkup(inline_keyboard=[row1, row2])


def build_feedback_comment_keyboard(event_id: int, rating: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞"""
    keyboard = [
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"feedback:skip_comment:{event_id}:{rating}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_admin_users_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ—Ç–∞'"""
    keyboard = [
        [InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="admin_users:participants")],
        [InlineKeyboardButton(text="üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="admin_users:blacklist")],
        [InlineKeyboardButton(text="üõ° –ê–¥–º–∏–Ω—ã", callback_data="admin_users:admins")],
        [InlineKeyboardButton(text="üé≤ –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", callback_data="admin_users:games")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_users_list_keyboard(users: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    keyboard = []
    for i, u in enumerate(users):
        username = u.get("tg_username") or u.get("username") or "?"
        keyboard.append([InlineKeyboardButton(text=username, callback_data=f"global_user:show:{i}")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users:back")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_global_user_info_keyboard(user_index: int) -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"global_user:message:{user_index}")],
        [InlineKeyboardButton(text="üö´ –î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°", callback_data=f"global_user:blacklist_add:{user_index}")],
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data=f"global_user:history:{user_index}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users:participants")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_global_blacklist_list_keyboard(users: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    keyboard = []
    for i, u in enumerate(users):
        username = u.get("user_tg_username") or u.get("tg_username") or "?"
        keyboard.append([InlineKeyboardButton(text=f"üö´ {username}", callback_data=f"gbl:blacklist:show:{i}")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users:back")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_global_blacklist_user_keyboard(user_index: int) -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"gbl:blacklist:message:{user_index}")],
        [InlineKeyboardButton(text="‚úÖ –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ß–°", callback_data=f"gbl:blacklist:remove:{user_index}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users:blacklist")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_admins_list_keyboard(admins: List[Dict[str, Any]], callback_prefix: str = "gbl:admins:show") -> InlineKeyboardMarkup:
    keyboard = []
    for i, a in enumerate(admins):
        tg = a.get("tg") or a.get("tg_username") or "?"
        keyboard.append([InlineKeyboardButton(text=tg, callback_data=f"{callback_prefix}:{i}")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users:back")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_admin_info_keyboard(admin_index: int) -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"gbl:admin:message:{admin_index}")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data=f"gbl:admin:past_events:{admin_index}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users:admins")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_cancel_global_message_keyboard(back_callback: str) -> InlineKeyboardMarkup:
    keyboard = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=back_callback)]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_admins_selection_keyboard(admins: List[Dict[str, Any]], selected_usernames: List[str], done_callback: str, toggle_prefix: str, back_callback: str) -> InlineKeyboardMarkup:
    keyboard: List[List[InlineKeyboardButton]] = []
    for i, a in enumerate(admins):
        tg = a.get("tg") or a.get("tg_username") or "?"
        mark = "‚úÖ " if tg in selected_usernames else ""
        keyboard.append([InlineKeyboardButton(text=f"{mark}{tg}", callback_data=f"{toggle_prefix}:{i}")])
    keyboard.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=done_callback)])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_games_list_keyboard(games: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    keyboard: List[List[InlineKeyboardButton]] = []
    for i, g in enumerate(games):
        title = g.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        keyboard.append([InlineKeyboardButton(text=title, callback_data=f"games:show:{i}")])
    keyboard.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", callback_data="games:create")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users:back")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_game_view_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="admin_users:games")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_board_games_selection_keyboard(games: List[Dict[str, Any]], selected_titles: List[str], done_callback: str, toggle_prefix: str, back_callback: str) -> InlineKeyboardMarkup:
    keyboard: List[List[InlineKeyboardButton]] = []
    for i, g in enumerate(games):
        title = g.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        mark = "‚úÖ " if title in selected_titles else ""
        keyboard.append([InlineKeyboardButton(text=f"{mark}{title}", callback_data=f"{toggle_prefix}:{i}")])
    keyboard.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=done_callback)])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_game_inline_keyboard(draft: Dict[str, Any]) -> InlineKeyboardMarkup:
    keyboard = []
    def is_filled(v):
        return v is not None and str(v).strip() != ""
    title_mark = "‚úÖ" if is_filled(draft.get("title")) else ""
    photo_mark = "‚úÖ" if is_filled(draft.get("photo")) else ""
    rules_mark = "‚úÖ" if is_filled(draft.get("rules")) else ""
    keyboard.extend([
        [InlineKeyboardButton(text=f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {photo_mark}", callback_data="game:photo")],
        [InlineKeyboardButton(text=f"–ù–∞–∑–≤–∞–Ω–∏–µ {title_mark}", callback_data="game:title")],
        [InlineKeyboardButton(text=f"–ü—Ä–∞–≤–∏–ª–∞ {rules_mark}", callback_data="game:rules")],
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="game:confirm")],
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_game_final_confirm_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="game:final_confirm")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="game:final_cancel")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)
